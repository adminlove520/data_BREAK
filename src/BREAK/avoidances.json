{
  "avoidanceCategories": {
    "AC01": {
      "title": "防护",
      "description": "事前的风险规避机制，通过此类规避手段可以对业务系统进行防护，提升攻击门槛，规避或减少攻击发生概率。",
      "keyword": "prevent"
    },
    "AC02": {
      "title": "识别",
      "description": "事中的风险规避机制，通过此类手段可以及时对攻击行为进行识别，以便及时处置。",
      "keyword": "detect"
    },
    "AC03": {
      "title": "处置",
      "description": "风险识别后的后续处理机制，通过此类手段来及时阻止或降低攻击影响，减少经济损失，避免合规风险。",
      "keyword": "dispose"
    }
  },
  "avoidances": {
    "A01": {
      "title": "人机识别挑战",
      "category": "AC02",
      "summary": "通过设置人机挑战或收集分析数据，实现对人类操作和非人类操作区分。",
      "description": "通过行为验证码、图文验证码等方式设置人机挑战，或通过收集鼠标移动轨迹、屏幕点按压力、请求访问速率、3D陀螺仪等数据并分析的方式进行人机识别。注：人脸识别通常被认为是生物特征识别（A23）的一种。",
      "limitation": "目前黑灰产催生出“打码平台”（AT0008），通过众包服务人工打码模式来完成突破人机识别挑战。对于人机识别挑战基本是降维打击，从理论上讲可导致所有显式的人机识别彻底失效。",
      "references": [
        {
          "title": "Captcha - 百度百科",
          "description": "",
          "link": "https://baike.baidu.com/item/Captcha/9630117?fr=aladdin"
        }
      ]
    },
    "A01-001": {
      "title": "图片验证码",
      "category": "AC02",
      "summary": "通过识别图片中的内容并填写到输入框中完成验证的一种人机挑战",
      "description": "图片验证码是一种最传统的验证码，挑战点主要依赖于人类对不规则图文的识别能力与计算机识别能力差距。",
      "limitation": "随着计算机计算能力的提升以及AI图片识别能力的增强，这种验证码被破解的概率越来越高。图片验证码的其中一个进化方向是更加复杂的图形识别，这虽然可以在一定程度上阻止机器识别的脚步，但同时对于正常人类的验证码识别成功率也带来较大影响和干扰；另一个进化方案是与行为验证码（A01-002）相结合，通过多维度的因素来完成人机识别挑战，是目前较为主流的进化方向。",
      "references": [
        {
          "title": "Captcha - GITHUB",
          "description": "对于图形验证码这种传统且古老的验证机制来说，目前在github上有非常多非常成熟的开源库可用。",
          "link": "https://github.com/search?q=captcha"
        }
      ]
    },
    "A01-002": {
      "title": "行为式验证码",
      "category": "AC02",
      "summary": "一种结合图文识别与人类鼠标键盘、屏幕操作相结合的人机挑战模式",
      "description": "目前常见的行为式验证码通常建立在人类识别图文信息基础上的点击、选择、滑动、拖动等动作，通过对比人类的行为与机器行为的差异来进行人机判断。因为除了图片识别外，还增加了行为鉴别，所以抗破解性会高于传统的图片验证码（A01-001）",
      "limitation": "行为验证码的原理是在人类识别图文信息的基础上，依照对图文的理解去进行一定的键鼠动作。从图片验证码（A01-002）的局限性可见图文信息的挑战越来越难以区分人机界限，行为验证码同样面临这样的问题。行为验证通过对人类的键鼠动作进行深度学习形成模型以识别机器自动化键鼠的平滑操作。但机器自动化同样可以通过对人类键鼠动作的深度学习来达到以假乱真的地步，会是未来面临的巨大挑战。",
      "references": [
        {
          "title": "AJ-Captcha",
          "description": "行为验证码，包含滑动拼图、文字点选两种方式",
          "link": "https://gitee.com/anji-plus/captcha"
        }
      ]
    },
    "A01-003": {
      "title": "静默人机行为识别",
      "category": "AC02",
      "summary": "静默收集用户的浏览、鼠标移动、屏幕点按等行为，通过算法模型进行人机识别",
      "description": "静默人机行为识别会将识别结果作为一种输入，与风控系统（A15）结合使用。适合长链路业务和可以实施滞后处置的场景。因为人机行为识别可以是通过静默收集用户行为进行的，并且不在第一时间予以响应和拦截，因此与图片验证码（A01-001）和行为验证码（A01-002）相比，更弱的对抗使得抗破解周期得以大幅延长。适用于“宽进严出”的场景，譬如在注册阶段识别但允许用户注册成功，但在用户使用账户阶段予以功能降级或账户锁定等。",
      "limitation": "静默人机行为识别是一种事后的识别策略，即默认允许先操作、再识别、后处置的工作逻辑。这使得它在某些场景下不适用，譬如批量注册（R0030-001）、秒拍出价（R0003）、拍卖狙击（R0004）等要求第一时间识别和拦截的场景。",
      "references": []
    },
    "A02": {
      "title": "接口签名",
      "category": "AC01",
      "summary": "对接口发送请求进行签名和校验。",
      "description": "因为所有的用户端数据均无法保证完整性，因此可以通过对请求数据进行 HASH 值计算、标记和服务端再校验来确保数据未经过篡改。需要注意的是：数据的完整性紧密依赖于 HASH 算法的强壮性。像 MD5 这种弱 HASH 算法已经较难保证数据的完整性。此外，目前接口签名更多地被应用在自动化请求识别对抗环节，严格来说接口签名本身并不具备人机识别能力，目前的对抗点更多是在于对签名算法的隐藏上，譬如终端签名算法混淆（A13）、图片隐写、算法白盒化、动态秘钥、WebAsm等。",
      "limitation": "接口签名用来保证数据传输过程的完整性是没有问题的，不过因接口签名目前广泛被用在防止自动化的环节，这使得接口签名面临着强对抗。因为签名算法必须以某种形式存在于用户终端，相当于对用户可见，攻击者通过解析算法、调用签名接口、模拟点击等方式均可破解接口签名算法，来实现对请求的自动化伪造。",
      "references": [
        {
          "title": "smart-cloud",
          "description": "一个开源 spring cloud 脚手架，具备接口签名功能",
          "link": "https://github.com/smart-cloud/smart-cloud-examples#%E4%BA%8C%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8"
        }
      ]
    },
    "A03": {
      "title": "爬虫云端识别",
      "category": "AC02",
      "summary": "基于终端请求特征以及访问频次对请求进行爬虫识别和限制。",
      "description": "广义来说，凡是进行人机识别、自动化请求识别等能力均属于爬虫识别范畴。不过这里我们采用狭义定义，即：基于终端请求特征、用户身份和访问频次对高频自动化请求进行识别的能力。终端请求特征包括但不限于：设备指纹与设备ID（A21）、请求IP与HTTP头信息等数据。终端请求特征结合用户身份实现了对请求端的唯一性标记，结合服务端算法和单位时间的频率、次数限制配置，实现对高频自动化请求的识别和限制。",
      "limitation": "爬虫识别依赖三个前提条件：1、请求者唯一性识别，2、请求者身份识别，3、请求频次计算。三者缺一不可。不能进行有效的唯一性识别，那么就可以通过更换IP，更换UA或设备指纹的方式绕过检测；不能对请求者身份识别，就不能区分好爬虫（搜索引擎）和坏爬虫；不能进行频次计算，就无法实施有效拦截。而这三个前提条件都有一定的有限性，不依赖于账号的终端和身份识别可以伪造，依赖账号的身份识别同样可以通过批量注册（R0030-001）对抗；请求者身份如果是通过请求特征识别的，那么就可以伪造；请求频次可以通过慢频爬取等方式绕过。此外爬虫识别同样具有滞后性，对于秒拍出价（R0003）和拍卖狙击（R0004）等场景无法第一时间识别和规避。所以单纯靠爬虫识别是解决不了自动化请求的问题的，必须要结合其他的规避手段。",
      "references": [
        {
          "title": "爬虫与反爬虫技术简介",
          "description": "请参见第二章节-反爬虫相关技术",
          "link": "https://mp.weixin.qq.com/s/dJhCQmpejY-GTE_a1ZpPsg"
        }
      ]
    },
    "A04": {
      "title": "频率限制",
      "category": "AC03",
      "summary": "请求相关资源时进行访问频率控制。",
      "description": "频率限制通常可以用在流量削峰等场景，其目的是为了缓解服务器压力，对于远超过人类正常请求的超高频数据请求的爬虫场景下会有较为直接的拦截作用，避免远超服务器承载的流量导致服务器拒绝服务器以及所引起的雪崩效应。",
      "limitation": "与爬虫识别（A03）不同，频率限制并不会严格区分人类流量和自动化流量，这导致过低的阈值通常会将部分人类访问请求误拦截，而过高的阈值又会将低频请求爬虫放行，也因此并不能达到最好的爬虫识别与拦截效果。",
      "references": []
    },
    "A05": {
      "title": "数量限制",
      "category": "AC03",
      "summary": "请求相关资源时进行访问数量控制。",
      "description": "数量限制与频率限制（A04）类似，不过其控制点主要在于针对较长一段时间内的资源请求总量限制，而频率限制是在较短一段时间内的访问数量控制，对于较长时间的访问数量并不做限制。譬如短信验证码请求接口一般除了单位时间的频率限制外，还会根据IP、手机号、用户ID等标识进行小时级，甚至天级为单位的请求总量限制，一方面防止对资源的恶意消耗，另一方面还可以防止验证码滥用及短信轰炸。",
      "limitation": "数量限制是一种较为宽泛的减损办法，即允许损失或风险的发生，但有一定的容忍度。在不能准确识别或获得请求者唯一身份的情况下，效果会比较差。譬如手机验证码滥用（R0029）、CC攻击（R0039-001）等可以在不断更换IP的情况下来实现持续性滥用，而若不区分请求者身份进行总量的限制，又会影响正常用户的使用，譬如有些云服务限制每日请求的总流量，当流量超出后就阻拦任何请求。",
      "references": []
    },
    "A06": {
      "title": "恶意内容识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意内容。",
      "description": "用户生成内容包括但不限于：文字、图像、视频（流）、链接等，恶意内容按利益点与场景不同包括但不限于：违法、违规、欺诈、恶意推广等。简单文字类识别可以通过设置关键词，复杂文本内容可能还包括自然语言处理等。涉及图像或视频类内容除OCR文本识别外，还包含图像内部识别等。链接类除黑白名单外，部分场景下还需要结合威胁情报（A16）来实现更精确识别。",
      "limitation": "恶意内容识别大都基于关键词或某种策略模型的评分机制，这使得攻击者可以通过关键词绕过，模型绕过或擦边评分机制等访问来对抗识别。",
      "references": []
    },
    "A06-001": {
      "title": "自动恶意文本识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意文本内容。",
      "description": "简单的文本识别通常建立在黑名单关键词的基础上，复杂的文本识别会结合深度学习以及对文本内部的褒贬义分析等技术",
      "limitation": "由于语言的多样性、多义性，以及中文多音、同音、形似等字符广泛存在，想绕过自动恶意文本识别去生成一段不改原义的恶意文本是十分容易的，一个典型的例子就是“火星文”，此外还有像拼音首字母代替等等各种各样的方式。因此在一些必要或极端场景下，需要介入人工内容审核（A06-007）作以补充。",
      "references": []
    },
    "A06-002": {
      "title": "自动恶意图片识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意图片内容。",
      "description": "恶意图片识别一般包含两个部分，一是对图片中的文字的OCR识别，然后再进行恶意文本识别（A06-001）；二是对图片的展现内容的识别，譬如色情、暴力等，通常要结合机器图像识别算法来实现。",
      "limitation": "目前图片OCR文字识别准确率较高，但同样受到自动恶意文本识别（A06-001）中的局限性影响。而对图片内容进行识别，目前准招率还很低，需要结合人工识别。",
      "references": []
    },
    "A06-003": {
      "title": "自动恶意音频识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意音频内容。",
      "description": "恶意音频识别也应包含两个部分，一是语音识别，将语音转换成文字后，再进行恶意文本识别（A06-001）；二是对音频所展现的内容识别，譬如色情、暴力等。（待完善）",
      "limitation": "",
      "references": []
    },
    "A06-004": {
      "title": "自动恶意视频识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意视频内容。",
      "description": "目前对恶意识别的通用办法是将视频关键帧提取成图片，然后进行恶意图片识别（A06-002）；将视频的音轨提取出来做自动恶意音频识别（A06-003）。",
      "limitation": "同样会受到自动恶意图片识别（A06-002）局限性影响，也会受到自动恶意音频识别（A06-003）的局限性影响",
      "references": []
    },
    "A06-005": {
      "title": "自动恶意链接识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意链接。",
      "description": "目前主流处理链接有两种模式，一种是白名单模式，一种是黑名单模式。通常黑名单模式需要结合域名&链接威胁情报（A16-002）来实现。",
      "limitation": "基于白名单的域名审计在面临任意链接跳转、资源滥用（R0069）时是无效的；基于黑名单的审计又存在可以轻易更换域名或链接的问题。所以很多情况下不能起到很好的效果。",
      "references": []
    },
    "A06-006": {
      "title": "自动恶意文档识别",
      "category": "AC02",
      "summary": "识别用户生成内容中的恶意文档。",
      "description": "恶意文档识别分为两个方面进行，一是文档内容识别，通过提取文档内容再进行恶意文本识别（A06-001）和恶意图片识别（A06-002）；二是文档本身的反病毒识别，通常需要结合反病毒软件进行。",
      "limitation": "",
      "references": []
    },
    "A06-007": {
      "title": "人工内容审核",
      "category": "AC02",
      "summary": "通过人工的方式对用户生成内容进行合规性审核。",
      "description": "人工审核通常用于对图片、视频、视频流的审核，或者在机器自动识别的基础上进行加强判断。",
      "limitation": "由于人力限制以及效率限制，可以通过多账号、大批量的自动化请求来实现针对人力的拒绝服务。从而实现针对事前审核的长时间停摆，或者针对事后审核的恶意内容投放处置时间的大幅延长。",
      "references": []
    },
    "A07": {
      "title": "多因素验证",
      "category": "AC01",
      "summary": "增加除主要身份识别手段（譬如账密等）外的其他维度身份验证因素。",
      "description": "多因素验证（MFA）基本成为身份验证的主流方式，其存在很大程度上解决了由于账密泄露导致的身份冒充登录和滥用问题。常见的多因素验证因子有：短信验证码、邮箱验证码、基于时间的一次性密码等。",
      "limitation": "MFA照比传统账密登录，可以大幅提升账户安全性，不过针对MFA的攻击也层出不穷，譬如：中间人（MitM）攻击、SIM卡交换攻击、Pass-The-Cookie攻击、MFA疲劳攻击等，这在一定程度上打破MFA构建的账户安全体系。",
      "references": []
    },
    "A08": {
      "title": "提升服务可用性",
      "category": "AC01",
      "summary": "通过过滤流量、增加服务器计算资源等方式提升可承载的终端同时请求数量。",
      "description": "提升服务可用性是一个系统性工程，一方面需要识别和拦截恶意流量，另一方面需要系统性解决系统短板，提升响应效率。",
      "limitation": "",
      "references": []
    },
    "A08-001": {
      "title": "增加计算资源",
      "category": "AC01",
      "summary": "通过增加服务器计算资源的方式提升可承载的终端同时请求数量。",
      "description": "对于分布式架构来说，增加计算资源是最简单有效的提升可用性的方式",
      "limitation": "与业务系统优化（A08-004）是相辅相成的关系，增加计算资源可以快速解决可用性问题，但会大幅增加运营成本。",
      "references": []
    },
    "A08-002": {
      "title": "DDoS防护",
      "category": "AC01",
      "summary": "通过DDoS防护系统识别和过滤攻击流量",
      "description": "通过DDoS防护系统过滤攻击流量可以使得更少的更真实的用户流量被服务器响应，是在系统遭受大规模攻击情况下的一种行之有效的办法。",
      "limitation": "现有的DDoS防护系统对CC攻击的防御效果不佳，需结合爬虫识别等手段（A03）",
      "references": []
    },
    "A08-003": {
      "title": "前置CDN",
      "category": "AC01",
      "summary": "通过在访问资源前配置CDN来达到对静态资源的缓存与加速",
      "description": "动静态分离是目前提升服务器响应效率的一种常见方法，对于不能实施动静态分离或静态资源负载大的情况下，通过前置CDN可以有效缓解服务器压力，提升响应效率。",
      "limitation": "对静态资源的缓存加速较为明显，动态资源解决不了",
      "references": []
    },
    "A08-004": {
      "title": "业务系统优化",
      "category": "AC01",
      "summary": "优化业务系统，提成响应效率，降低资源消耗",
      "description": "通过精简流程、设置缓存、优化算法、增加并发、调整架构等方式降低业务请求对系统的消耗，减少响应时间，增加请求承载量。",
      "limitation": "实施周期较长，适用于长期规划，远水解不了近渴。",
      "references": []
    },
    "A09": {
      "title": "时间限制",
      "category": "AC03",
      "summary": "通过时间控制相关资源仅在一段时间内有效。",
      "description": "一个时间限制的典型场景就是短信验证码发送，通过限制验证码的发送时间间隔，达到避免对特定手机号实施短信轰炸的目的。在密码碰撞、支付密码错误等场景也常会通过时间限制避免账号沦陷以及金钱损失。时间限制有时也会被应用在用户内容发送场景，通过进行一定限制避免实施内容轰炸或延缓来自自动化请求的压力。",
      "limitation": "时间限制通常是一种“影响业务”的规避手段，会对正常用户请求或服务造成一定影响，因此通常会取一个比较折中的时间，使得既能被正常用户接受，又能最大限度拦截攻击者。",
      "references": []
    },
    "A10": {
      "title": "异常环境检测",
      "category": "AC02",
      "summary": "对应用运行环境及用户请求环境进行识别，发现异常环境。",
      "description": "异常环境识别通过获取包括不限于终端静默人机挑战、应用合法性、进程合法性、是否越狱（ROOT）、陀螺仪状态、是否外挂插件等数十种数据的获取、分析和判断。业务场景下的异常环境识别一般是通过业务终端访问系统实现的。根据业务访问模式的不同，终端访问系统可能是浏览器、APP移动应用、桌面级程序等形式。异常环境识别能力严重依赖业务终端访问系统的权限，由于用户授权限制以及法律法规限制，异常环境识别具有一定的局限性，且也受到对抗和终端数据完整性制约。",
      "limitation": "因为异常环境检测都是在用户可控的终端上展开的，所以最终效果取决于对抗性。从理论上讲，因为终端可控，那么就总是能够绕过各种异常环境检测策略，最终就是个时间成本与能力高低问题。",
      "references": []
    },
    "A10-001": {
      "title": "手机模拟器检测",
      "category": "AC02",
      "summary": "对APP是否运行在手机模拟器上进行识别",
      "description": "模拟器常常被用来刷单，如何准确的识别模拟器成为App开发中的一个重要模块，目前也有专门的公司提供相应的SDK供开发者识别模拟器。 目前流行的Android模拟器大概分为两种，一种是基于Qemu，另一类是基于Genymotion(VirtualBox类)，网上现在流行用一些模拟器特征进行鉴别，比如：通过判断IMEI是否全部为0000000000格式；判断Build中的一些模拟器特征值；匹配Qemu的一些特征文件以及属性；通过获取cpu信息，将x86的给过滤掉（真机一般都是基于ARM）等",
      "limitation": "手机模拟器检测的对抗点有两处：一是对APP采集的信息提前进行伪造，二是对APP采集后上传的信息进行伪造。",
      "references": [
        {
          "title": "Android模拟器识别检测技术",
          "description": "",
          "link": "https://blog.csdn.net/liuno0/article/details/124279075"
        }
      ]
    },
    "A10-002": {
      "title": "云手机检测",
      "category": "AC02",
      "summary": "对APP是否运行在云手机上进行识别",
      "description": "可以通过识别手机模拟器（A10-001）的方式来进行云手机识别，此外设备指纹、异常环境监测、出网IP等也可用来进行云手机识别。由于云手机通常不能修改ROM，大部分甚至不能获得ROOT权限，所以对抗效果通常会好于手机模拟器检测（A10-001）",
      "limitation": "随着云手机、云游戏的不断发展和普及，APP厂商将不能采用“云”即是“黑”的一棒子打死的策略，否则将面临大量用户投诉，这为未来黑产利用云手机留下了空间。",
      "references": []
    },
    "A10-003": {
      "title": "手机ROOT/越狱检测",
      "category": "AC02",
      "summary": "对APP是否运行在被Root或越狱破解的设备上进行识别",
      "description": "通过Root或越狱后的特征来进行判断，譬如：可以查看发布的系统版本，是test-keys（测试版），还是release-keys（发布版）；检查是否存在Superuser.apk；检测在常用目录下是否存在su；使用which命令查看是否存在su；执行su，看能否获取到root权限；是否存在busybox；访问/data目录，查看读写权限等",
      "limitation": "对于ROOT机反检测有两种策略：其一是对应用下手，干预应用的ROOT检测行为；另外一个思路则是对系统下手，隐藏系统自身ROOT相关的特征。通过还原手机ROOT检测的每一条策略和规则，就能提前预制反检测策略。譬如开源的RootCloak就可以通过hook调用api的函数用来对抗root监测",
      "references": [
        {
          "title": "Android root检测方法小结",
          "description": "",
          "link": "https://www.lmlphp.com/user/58076/article/item/637693/"
        }
      ]
    },
    "A10-004": {
      "title": "外挂检测",
      "category": "AC02",
      "summary": "对程序是否被注入运行时指令或外挂程序进行识别",
      "description": "通过对程序运行时进行完整性校验、关键词或DLL列表检测，对进行列表、窗口标题关键词等进行判断来检测是否存在外挂程序",
      "limitation": "与手机ROOT/越狱检测（A10-003）的局限性一样，通过分析并还原检测过程，阻断或提供Hook后的虚假值即可绕过外挂检测策略。不过因外挂通常用在游戏中，而游戏的数据包可读性比基于HTTP协议的APP应用差许多，如果将外挂检测逻辑和数据回传隐藏在正常的游戏运行和通信中，将加大外挂反检测的难度。",
      "references": []
    },
    "A10-005": {
      "title": "多开检测",
      "category": "AC02",
      "summary": "对APP是否在终端上被多开进行识别",
      "description": "游戏多开检测只是对游戏的进程数进行限制，分为事前检测、事中检测、和事后检测。事中检测和事后检测往往没有提示，是游戏公司封号、处罚的手段，事前检测即禁止游戏多开，包括：枚举进程的多开检测、互斥对象多开检测、信号量多开检测、窗口多开检测、共享内存检测多开等方法",
      "limitation": "",
      "references": [
        {
          "title": "游戏多开检测的几种实现方法及破解方法参考",
          "description": "",
          "link": "https://blog.csdn.net/weixin_40582034/article/details/125960599"
        }
      ]
    },
    "A10-006": {
      "title": "调试器检测",
      "category": "AC02",
      "summary": "对程序是否运行被调试进行识别",
      "description": "最基本的调试器检测技术就是检测进程环境块(PEB)中的BeingDebugged标志。PEB另一个成员被称作NtGlobalFlag（偏移0x68），壳也通过它来检测程序是否用调试器加载。Kernel32!CheckRemoteDebuggerPresent()是另一个可以用于确定是否有调试器被附加到进程的API。在调试器中步过INT3和INT1指令的时候，由于调试器通常会处理这些调试中断，所以异常处理例程默认情况下将不会被调用，Debugger Interrupts就利用了这个事实。这样壳可以在异常处理例程中设置标志，通过INT指令后如果这些标志没有被设置则意味着进程正在被调试。更多方式请阅读参考资料。",
      "limitation": "",
      "references": [
        {
          "title": "脱壳的艺术--2 调试器检测技术",
          "description": "",
          "link": "https://blog.csdn.net/iiprogram/article/details/2248506"
        }
      ]
    },
    "A10-007": {
      "title": "虚拟机检测",
      "category": "AC02",
      "summary": "对APP是否运行在虚拟机中进行识别",
      "description": "虚拟机运行环境检测，指的是软件能够判断当前是不是在虚拟机中运行，根据判断结果，做对应的处理。从恶意软件的视角，它可以在虚拟机中改变自身行为，加大分析难度。从软件自身安全出发，用于防止被逆向调试以及某些场景下的非正常使用。",
      "limitation": "",
      "references": [
        {
          "title": "虚拟机运行环境检测",
          "description": "",
          "link": "https://www.cnblogs.com/cherishui/p/14366072.html"
        }
      ]
    },
    "A11": {
      "title": "退出登录态",
      "category": "AC03",
      "summary": "将用户踢出登录态，并在服务端注销所有登录状态。",
      "description": "踢出登录态属于一种轻量级的用户处置策略（A20）。其中一些情况是为了用户账户安全考虑的，譬如Cookies复用与异地登录的识别与处置措施；而另一些情况是希望登录态的使用者重新经历登录挑战（A18），譬如很多爬虫会利用登录态进行数据爬取，因登录挑战过程一般包含账密挑战、人机识别挑战（A01）和多因素验证挑战（A07），可以有效的干扰自动化爬虫的爬取进程。",
      "limitation": "",
      "references": []
    },
    "A12": {
      "title": "强制改密",
      "category": "AC03",
      "summary": "对用户下发强制改密操作，用户必须成功改密后方可进行相关操作。",
      "description": "强制改密一般会应用在撞库成功登录、账密泄露、异地登录、长期未登录、密码过期等场景，其主要目的还是寄托于通过改密，以及改密过程中的账户所有权验证（A18）来降低用户账密泄露风险。",
      "limitation": "",
      "references": []
    },
    "A13": {
      "title": "终端应用加固",
      "category": "AC01",
      "summary": "对前端JS脚本或客户端APP进行代码级别混淆、增加反调试等功能。",
      "description": "访问端代码混淆一方面可以在一定程度上解决黑灰产直接逆向访问端代码，分析资源访问逻辑，实现业务自动化及数据爬取问题；另一方面也能增加破解终端人机挑战、异常环境识别（A10）、接口签名（A02）等业务安全防护手段的难度。不过因为混淆后的代码依旧在用户访问端，所以在不考虑时间成本和人力成本的前提下，混淆代码最终还是具备被完全还原的可行性。所以访问端代码混淆仅是一种降低黑灰产ROI的手段。不过若按照PDR中的Pt>Dt+Rt公式来看，如果防守者有能力将代码混淆的周期降低到破解周期内，则有可能达到长期防护的效果。反调试既可以是一种针对调试的阻断，也可以是一种针对调试的干扰，譬如可以实现非调试环境下是一种程序运行逻辑，调试环境下是另外一种程序运行逻辑。",
      "limitation": "",
      "references": []
    },
    "A13-001": {
      "title": "Android应用加固",
      "category": "AC01",
      "summary": "通过防逆向、防篡改、防调试、防恶意软件等方式来加固应用程序",
      "description": "提供对DEX的多种保护模式结合VMP虚拟机，对关键代码、核心逻辑进行加密保护，避免通过IDA、JEB、JADX、APKTool、Readelf等逆向工具分析获取源码；对App应用每个文件分配唯一识别指纹，结合签名及文件的完整性校验，替换任何一个文件会导致无法运行，防止广告病毒植入、二次打包、功能屏蔽等恶意破解；多重加密技术结合底层对抗技术防止代码注入，防止Java层/C层动态调试，可有效抵挡动态调试、内存DUMP、代码注入、HOOK等恶意攻击；有效检测并对抗：ROOT、模拟器、界面劫持、多开器、Xposed插件、frida等各种HOOK工具（摘自dun.163.com）",
      "limitation": "",
      "references": []
    },
    "A13-002": {
      "title": "iOS应用加固",
      "category": "AC01",
      "summary": "通过防逆向、防篡改、防调试、防恶意软件等方式来加固应用程序",
      "description": "对字符串进行加密保护，防止通过IDA等工具获取关键词定位核心业务代码；对应用代码进行多种方式混淆处理，提高代码的复杂度和逆向分析难度但不影响原始逻辑和性能；对应用的符号进行混淆,增加代码逆向难度；高级的反调试技术，防止攻击者、恶意分析者动态调试分析程序；对应用的二进制代码进行保护，防止逆向分析工具将代码反编译为伪代码（Pseudo-Code）；对应用中的数值进行保护，防止修改器对数值进行篡改，比如游戏中的攻击力、血量等值；对应用进行完整性保护，防止破解者对应用的篡改、重打包等作弊行为（摘自dun.163.com）",
      "limitation": "",
      "references": []
    },
    "A13-003": {
      "title": "H5小程序加固",
      "category": "AC01",
      "summary": "通过防逆向、防篡改、防调试、防恶意软件等方式来加固应用程序",
      "description": "利用加密技术对抗动态调试，防止代码被调试破解、数据被套取；支持H5应用强绑定指定域名，防止应用域名被篡改，导致用户被导流甚至被欺诈；对代码、脚本文件进行加密，包括动态加解密字符串、函数名、表达式等，对变量进行混淆，提高破解难度。同时支持代码文件压缩，减少应用体积；利用加密技术对数据进行保护，防止网络抓包分析获取敏感数据（摘自dun.163.com）",
      "limitation": "",
      "references": []
    },
    "A13-004": {
      "title": "桌面应用加固",
      "category": "AC01",
      "summary": "通过防逆向、防篡改、防调试、防恶意软件等方式来加固应用程序",
      "description": "通过防逆向、防篡改、防调试、防恶意软件等方式来加固应用程序。",
      "limitation": "",
      "references": []
    },
    "A14": {
      "title": "终端防篡改",
      "category": "AC01",
      "summary": "保证访问端程序完整性，防止被恶意篡改",
      "description": "对终端应用及附属文件进行签名和完整性校验，确保程序在运行时内容植入、二次打包、功能屏蔽等情况下无法正常运行。",
      "limitation": "",
      "references": []
    },
    "A15": {
      "title": "风控策略",
      "category": "AC02",
      "summary": "通过现有或增加风控策略来实现特殊用户或行为标记和管控。",
      "description": "风控是在业务安全中应用得最多的一种手段，也是防御重特大业务运营风险的必要利器。风控的安全能力水位严重依赖于策略，这既是优势也是劣势。优势在于业务防护的灵活性，劣势在于对业务防护场景的覆盖性。此外，因为风控可以具备较多的风险处置环节与后置处置逻辑，可以避免跟攻击者站立在强对抗环节，达到策略长期有效的目的。不过，也正因为如此，照比其他一些安全防护手段，风控在某些情况下具有滞后性，譬如有些识别和处置是在业务流程环节结束后进行的，这有可能会造成一定的经济损失，也有可能会带来不好的用户体验。",
      "limitation": "",
      "references": []
    },
    "A16": {
      "title": "威胁情报",
      "category": "AC02",
      "summary": "通过黑IP库、黑手机号库等威胁情报对黑产身份进行标记。",
      "description": "威胁情报的定义可以很广义：所有可以标识好与坏的数据标签都属于威胁情报。威胁情报比较考验情报运营能力以及情报质量，需要长期并实时保持数据的鲜活性。一般会把召回率作为威胁情报好坏的度量标准，好的威胁情报可以直接作为一种防护手段使用，而质量差的威胁情报则需要结合风控策略（A15）来使用，避免覆盖不全或大规模误报。",
      "limitation": "",
      "references": []
    },
    "A16-001": {
      "title": "IP情报",
      "category": "AC02",
      "summary": "对恶意IP进行标识",
      "description": "IP威胁情报存在两大方面问题，一是准确性对于业务需求而言还不算太不高；二是IP的变化性很大，即很多IP的情报有效性很短，因此IP情报通常需要结合风控其他维度评分一起使用",
      "limitation": "",
      "references": []
    },
    "A16-002": {
      "title": "域名&链接情报",
      "category": "AC02",
      "summary": "对恶意域名进行标识",
      "description": "与IP情报（A16-001）相比，域名&链接情报的准确性和有效性都较高，但使用场景受限：IP情报基本可以适用于任何网络请求的场景，而域名&链接情报通常只适用于恶意链接识别（A06-005）场景",
      "limitation": "",
      "references": []
    },
    "A16-003": {
      "title": "手机号情报",
      "category": "AC02",
      "summary": "对黑产手机号、二次号等进行标识",
      "description": "黑产手机号大都从风控系统、风险设备识别对抗等维度产生；而二次号通常来源于运营商，通过对接运营商接口，业务可以及时获得手机号的在用和二次身份绑定状态等。",
      "limitation": "",
      "references": []
    },
    "A17": {
      "title": "身份授权判断",
      "category": "AC01",
      "summary": "对应用运行流程增加权限鉴别，以实现特定的资源只能被指定用户访问。",
      "description": "权限判断通常可以用在两种业务风险规避环节：一种是不同的资源请求与操作对用户身份的级别有更高的要求，譬如数据只允许管理员访问、借款只允许高信誉用户使用、特权资源只允许会员使用等；另一种是对同一用户的不同等级资源的有不同权限判断要求，譬如在支付、改密、用券等环节通过支付口令、人脸识别、所有权判断等方式来加强权限判断等。",
      "limitation": "",
      "references": []
    },
    "A18": {
      "title": "身份认证",
      "category": "AC01",
      "summary": "在终端请求相关资源时，强制要求用户使用登陆态。",
      "description": "在不验证登录态的情况下，要实现对终端访问行为的持续监控是很难的，因为不管是请求特征还是请求来源伪造起来均十分简单，这使得逃脱服务端对终端访问的持续监控成为了绕过对资源滥用惩罚的一种常用方法。也正因此，目前很多业务会将身份认证作为实现对终端访问行为持续性监控的有效办法，终端在不经过身份认证的情况下只能访问有限类型或有效数量的资源，若想访问更多资源，则必须进行身份认证。不过，身份认证的防护效果严重依赖于业务身份的获取成本，一方面是身份的注册成本，另一方面是身份的登录认证成本，此外也跟身份处罚（A20）的严厉性息息相关。",
      "limitation": "",
      "references": []
    },
    "A19": {
      "title": "身份行为审计",
      "category": "AC02",
      "summary": "对用户访问行为进行持续性审计，以发现用户账号风险。",
      "description": "与风控策略（A15）的风险监控机制类似，身份的行为监控和风险性判断同样是一种审计性防护手段。不过两者的防护主体和客体不同，风控的防护主体是业务，客体是用户；而身份行为审计的防护主体是用户，客体是攻击者。身份行为审计是一种常用的评估身份安全性的手段，不过在审计出异常后，需要结合身份的其他手段使用，如：身份再认证（A18）、多因素认证（A07）、强制改密（A12）等。",
      "limitation": "",
      "references": []
    },
    "A20": {
      "title": "身份处罚策略",
      "category": "AC03",
      "summary": "增加对相关账号的处罚策略，在触碰相关规则时对账号进行处罚，并禁止相关行为或动作。",
      "description": "身份处罚策略是限制不合法或不合规用户对业务造成持续性破坏的一种有效手段。身份处罚可以有两个层面：一是对账户本身的限制，譬如一定期限内禁用、警告公示、取消授权等；二是对账户可访问资源的限制，如禁用特殊的业务功能、限制资源使用频次、删除资源或限制非法资源访问等。",
      "limitation": "",
      "references": []
    },
    "A21": {
      "title": "终端标记跟踪",
      "category": "AC02",
      "summary": "通过设备指纹、永久Cookies、IMEI、MAC地址等方式对终端进行唯一标记",
      "description": "终端标记通常可以通过隐蔽标记埋点、设备ID获取、批量设备特征采集计算来获得。终端标记一般会应用在两种场景：一种是跨应用的同一设备识别标记场景，目的是为了实现用户从一个应用跳转到另一个应用的有效跟踪，以便计算广告推广过程中的有效点击或有效安装；另一种是同一应用的不同设备标记场景，目的是为了替代用户账户实现对匿名用户唯一访问终端的持续性跟踪。由于无法保证终端数据完整性，再加上法律法规对用户隐私性要求，终端标记的制约性较强，仅在一定情况下保持有效。",
      "limitation": "",
      "references": []
    },
    "A22": {
      "title": "协议加密",
      "category": "AC01",
      "summary": "对接口收发协议进行加密。",
      "description": "协议加密的目的主要是为了保证网络链路中的数据保密性和完整性，相关法律法规对于敏感数据传输加密也有合规性要求。需要注意的是，协议加密在用户终端并不能保证数据不被截获或篡改，这是由于加解密逻辑在终端实现决定的。有些业务会试图通过协议加密来防御终端请求的重复性提交和业务流程自动化，为了保障加密协议不被轻易逆向，可以采用访问端代码混淆（A13）来进行一定的防御。",
      "limitation": "",
      "references": []
    },
    "A23": {
      "title": "生物特征识别",
      "category": "AC02",
      "summary": "通过对人体的生物特征进行识别和比对，判断用户身份。",
      "description": "人脸、面容、指纹、声纹、虹膜、步态、掌纹、静脉纹路、DNA等都属于具备一定唯一性的人体生物特征。目前在移动设备上常用于远程比对的主要是人脸、面容、声纹等。由于图像和声音在防伪上的先天劣势，人脸识别、声纹识别有着非常激烈的对抗战场，目前主要用于在基本身份认证（A18）和双因素验证（A07）外的第三验证，相比盗号防御而言，更多地是防止身份仿冒。",
      "limitation": "",
      "references": []
    },
    "A24": {
      "title": "身份实名认证",
      "category": "AC02",
      "summary": "将虚拟身份与现实身份进行绑定",
      "description": "人或实体的现实身份包括：身份证、户口簿、驾驶证、军官证、士兵证、护照、营业执照、学生证等等法定证件、有效证件或身份认证，那么身份实名认证的过程即是将人或实体的网上虚拟身份与现实身份的绑定过程。这个过程中有可能会通过生物特征识别（A23）等方式来确定现实身份的有效性。",
      "limitation": "",
      "references": []
    },
    "A25": {
      "title": "数字证书",
      "category": "AC01",
      "summary": "通过数字证书机制对数据或文件进行数字签名和加密",
      "description": "与接口签名（A02）不同，数字证书更多强调数据或文件从发送端传递到接收端的整个传输链路的完整性，也可以作为对发送者的真实性验证机制。而接口签名通常更多地是为了增加流程自动化（R0001）的对抗成本，以及某些依托于用户端传递的跨站点数据传递的完整性保证。简单来说，数据证书要防御的是数据发送过程，而接口签名要防御的是用户终端。",
      "limitation": "",
      "references": []
    },
    "A25-001": {
      "title": "邮件数字证书",
      "category": "AC01",
      "summary": "对邮件的发件人进行可信性保证，对邮件内容进行完整性和保密性保证",
      "description": "对电子邮件和附件进行数字签名和加密， 为电子通信提供了高级别的机密性和安全性。 加密意味着只有预期收件人才能够阅读邮件， 而数字签名允许他们确认发件人，并验证邮件是否在途中被篡改。（摘自腾讯云）",
      "limitation": "",
      "references": []
    },
    "A25-002": {
      "title": "HTTPS数字证书",
      "category": "AC01",
      "summary": "对HTTP请求进行可信性、完整性和保密性保证",
      "description": "通过购买并安装HTTPS证书服务，保证用户请求服务器的可信性、完整性和保密性。",
      "limitation": "",
      "references": []
    },
    "A25-003": {
      "title": "文件电子印章",
      "category": "AC01",
      "summary": "对文件进行可信性和完整性签名保证",
      "description": "提供电子文件（电子合同、电子订单、电子协议等）互联网在线缔约、合同管理（历史合同、合同模板）、电子数据固证存证及实时取证等全链路管理的可信行为认证。通过保障电子数据在全生命周期内的完整、可信、不可被篡改，有效解决电子数据固证难、管理难、司法认证难的困境。（摘自jdcloud.com）",
      "limitation": "",
      "references": []
    },
    "A26": {
      "title": "限制外站访问",
      "category": "AC01",
      "summary": "通过判断referer等方式限制非本站访问",
      "description": "一般应用在图片、视频、文件等资源请求环节，限制外站访问一是可以减少对服务器的不必要消耗，另外也是防止资源滥用的一种有效方式。不过对于先跳转到本站再进行资源访问的请求防御不佳，身份认证（A18）的防御效果会更好。",
      "limitation": "",
      "references": []
    },
    "A27": {
      "title": "客服回访确认",
      "category": "AC02",
      "summary": "通过客服电话回访等方式来确认用户真实性或行为合法性",
      "description": "在某些特种的业务场景中（譬如金融场景等），系统识别用户异常行为处置过程中，可以结合客服电话回访来通知用户或鉴别用户合法性。",
      "limitation": "",
      "references": []
    },
    "A28": {
      "title": "资源访问限制",
      "category": "AC03",
      "summary": "对请求者可访问资源进行限制",
      "description": "与身份处罚策略（A20）不同的是，资源访问限制不一定是在获取用户登录身份的情况下。通过浏览器下发到终端的会话信息，访问IP信息，或者通过终端标记跟踪（A21）获取的唯一设备ID等实现对访问者的标定。并在基础上实现禁用特殊的业务功能、限制资源使用频次、删除资源或限制非法资源访问等。",
      "limitation": "",
      "references": []
    },
    "A29": {
      "title": "用户画像",
      "category": "AC02",
      "summary": "将用户标签化，通过各种标签来描述用户",
      "description": "用户画像是指根据用户属性、用户偏好、生活习惯、用户行为等信息抽象出来的带有标签的用户模型。 通俗的讲就是给用户贴标签，标签是通过分析用户信息得到的高度精细化的特征标识。 通过标注，可以用一些高度概括、易于理解的特征来描述用户，这样可以使人们更容易理解用户，便于计算机处理。",
      "limitation": "",
      "references": []
    },
    "A29-001": {
      "title": "用户评分",
      "category": "AC02",
      "summary": "通过一定的算法将用户标签数值化，通过数值体现用户在某种维度上的等级",
      "description": "用户评分可以是活跃度、信用度、消费能力、用户账号真实度、恶意度等不同方面的评分，这种评分可以为风控策略（A15）提供一定的输入。",
      "limitation": "",
      "references": []
    },
    "A30": {
      "title": "业务级蜜罐",
      "category": "AC02",
      "summary": "一种专门搭建给攻击者而不是正常用户的虚假业务资源系统",
      "description": "这种资源系统应保证在正常的业务访问或请求过程中不会被正常用户访问，但攻击者通过资源ID枚举、逆向、抓包、破解等方式可以发现并进行利用访问的资源。这样凡是访问虚假业务资源系统就都是攻击者，一是第一时间告警业务有资源被攻击者看中并攻击了，二是可以对攻击者的身份、特征、行为进行持续性跟踪，以方面进行规避手段升级或进行相关处置。",
      "limitation": "",
      "references": []
    },
    "A31": {
      "title": "返回虚假数据",
      "category": "AC03",
      "summary": "对已识别的攻击者返回不准确或虚假数据",
      "description": "返回虚假数据通常针对价格、评论数、销量、库存等数据的爬取。价格数据一般广泛被比价网站或竞对企业不正当竞争使用，此时返回虚假数据将导致此类企图失效。而评论数、销量等与价格相结合则有可能推断出企业的GMV，判断出企业经营情况，从而被用于恶意操纵股市或做空等情况。",
      "limitation": "返回虚假数据要保证在识别恶意请求的准确率为100%的前提下使用。因为虚假数据一旦被正常用户访问到，给正常用户造成干扰是小事，非常有可能被用户取证，作为平台伪造数据，不遵守依法合规从事经营活动的证据。较小的影响是造成社会舆论影响，较大的影响有可能会导致合规问题。",
      "references": []
    },
    "A32": {
      "title": "数据解析干扰",
      "category": "AC01",
      "summary": "增加程序解析或理解所获数据内容的难度",
      "description": "常见的数据解析干扰手段包含：文本混淆、数据加密、页面动态渲染、JS混淆、返回假数据（A31）等。文本混淆又包含CSS偏移、图片伪装文本、自定义字体等。这些手段并不直接识别或拦截攻击者对数据的请求过程，而是通过增加程序对数据资源的理解难度来提升对抗级别。",
      "limitation": "任何展现在终端的资源不管采取再复杂的对抗手段，均有被逆向和破解的可能性。此外有一种非常简单暴力的方法可以绕过大部分数据解析干扰，那就是先通过有头或无头浏览器模拟用户请求，访问资源所在页面，将页面截图再用OCR识别资源内容，可以轻易绕过上面提到的手段。",
      "references": [
        {
          "title": "爬虫与反爬虫技术简介",
          "description": "请参见第二章节-反爬虫相关技术",
          "link": "https://mp.weixin.qq.com/s/dJhCQmpejY-GTE_a1ZpPsg"
        }
      ]
    },
    "A33": {
      "title": "单设备登录",
      "category": "AC01",
      "summary": "一个账号仅允许在同类设备上登录一次",
      "description": "同类设备指：浏览器、手机APP、平板电脑、小程序等。一个账号只允许登录一个浏览器、手机APP、平板电脑、小程序实例，当第二个同类设备要登录时，就会把前一个已登录的对应设备实例登出。从而避免了一个账号被多台同类设备登录获得众多实例的情况",
      "limitation": "单设备登录的识别机制通常是在服务端记录账号在同类设备登录的次数，当大于1次时就初始化掉之前的实例，或将之前实例登出。但这种机制存在一个问题：就是如果是凭据复用（R0035），也就是CK(Cookies)登录（AT0030）的情况下，因为前一设备和新的设备都使用的是同一登录实例，从而可以突破限制实现多点登录。",
      "references": [
        {
          "title": "单设备登录",
          "description": "",
          "link": "https://blog.csdn.net/ls0111/article/details/79062857"
        }
      ]
    }
  }
}